# handlers.py
import logging
import asyncio
from telegram import Update, ReplyKeyboardRemove, InputFile
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode, ChatAction
from io import BytesIO

from config import *
from database import ChatHistoryDB
from utils import *

logger = logging.getLogger(__name__)
db = ChatHistoryDB()

# --- –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ò –î–ï–ô–°–¢–í–ò–Ø ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç\! –Ø –ú–∏–Ω–∏\-–°—ã—Ä–æ–∫\. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º, –∏–¥–µ—è–º–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è\.",
        reply_markup=main_keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )
    return SELECTING_ACTION

async def tech_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ†Ô∏è –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\nhttps://t\.me/Aubeig",
        reply_markup=main_keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

async def show_models(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üß† *–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:*\n\n‚Ä¢ –ú–∏–Ω–∏\-–°—ã—Ä–æ–∫ Lite ‚Äî –±—ã—Å—Ç—Ä–∞—è –∏ –ª–µ–≥–∫–∞—è\n‚Ä¢ –ú–∏–Ω–∏\-–°—ã—Ä–æ–∫ V1 ‚Äî –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞\n‚Ä¢ –ú–∏–Ω–∏\-–°—ã—Ä–æ–∫ Max ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å",
        parse_mode=ParseMode.MARKDOWN_V2, reply_markup=model_keyboard
    )

async def set_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text in MODEL_OPTIONS:
        context.user_data['model'] = MODEL_OPTIONS[text]
        await update.message.reply_text(
            f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ *{escape_markdown_v2(text)}*",
            parse_mode=ParseMode.MARKDOWN_V2, reply_markup=main_keyboard
        )

# --- –õ–û–ì–ò–ö–ê –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ---

async def admin_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=ReplyKeyboardRemove())
    return WAITING_PASSWORD

async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == ADMIN_PASSWORD:
        context.user_data['admin_mode'] = True
        await update.message.reply_text("üîì –ê–¥–º–∏–Ω\-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\.", reply_markup=admin_keyboard, parse_mode=ParseMode.MARKDOWN_V2)
        return ADMIN_MODE
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å\.", reply_markup=main_keyboard, parse_mode=ParseMode.MARKDOWN_V2)
        return SELECTING_ACTION

async def exit_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.pop('admin_mode', None)
    await update.message.reply_text("‚úÖ –ê–¥–º–∏–Ω\-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω\.", reply_markup=main_keyboard, parse_mode=ParseMode.MARKDOWN_V2)
    return SELECTING_ACTION

# --- –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ---

async def main_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    if update.message.text:
        await handle_text(update, context)
    # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # elif update.message.voice:
    #     await handle_voice(update, context)
    # ...–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    user_message = update.message.text

    thinking_msg = await update.message.reply_text(THINKING_ANIMATION[0], parse_mode=ParseMode.MARKDOWN_V2)
    animation_task = asyncio.create_task(show_animation(context, chat_id, thinking_msg.message_id, THINKING_ANIMATION))
    
    final_text = ""
    try:
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        
        is_admin = user_id in ADMIN_IDS and context.user_data.get('admin_mode', False)
        current_prompt = admin_system_prompt if is_admin else system_prompt
        
        chat_history = db.get_history(chat_id)
        if not chat_history or chat_history[0].get('content') != current_prompt:
            db.update_system_prompt(chat_id, current_prompt)
            chat_history = [{"role": "system", "content": current_prompt}]

        db.add_message(chat_id, "user", user_message)
        chat_history.append({"role": "user", "content": user_message})
        
        current_model_name = context.user_data.get('model', DEFAULT_MODEL)
        
        raw_response = await get_ai_response(current_model_name, chat_history)
        
        if not raw_response.strip():
            raise ValueError("API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")
        
        thoughts, answer = parse_ai_response(raw_response)
        
        db.add_message(chat_id, "assistant", answer)
        final_text = escape_markdown_v2(answer)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ HTML-–æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É
        if user_id in ADMIN_IDS:
            html_report = generate_admin_html(user_message, thoughts, answer)
            report_file = BytesIO(html_report.encode('utf-8'))
            await context.bot.send_document(
                chat_id=user_id,
                document=InputFile(report_file, filename=f"log_{update.message.message_id}.html"),
                caption=f"–û—Ç—á–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: `{user_message[:50]}...`"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        final_text = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {escape_markdown_v2(str(e))}"
    finally:
        context.user_data['processing'] = False
        await asyncio.sleep(0.1)
        await thinking_msg.edit_text(final_text, parse_mode=ParseMode.MARKDOWN_V2)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ ---
async def search_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.message.text
    thinking_msg = await update.message.reply_text(SEARCHING_ANIMATION[0], parse_mode=ParseMode.MARKDOWN_V2)
    animation_task = asyncio.create_task(show_animation(context, thinking_msg.chat_id, thinking_msg.message_id, SEARCHING_ANIMATION))
    
    final_text = ""
    try:
        summary = await google_search_and_summarize(query)
        final_text = escape_markdown_v2(summary)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        final_text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞\."
    finally:
        context.user_data['processing'] = False
        await asyncio.sleep(0.1)
        await thinking_msg.edit_text(final_text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=main_keyboard)
    
    return SELECTING_ACTION
